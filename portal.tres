[gd_resource type="Shader" format=3 uid="uid://7n4o3rme8quy"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.3.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_disabled, diffuse_burley, specular_schlick_ggx, unshaded;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform sampler2D texture_albedo2 : source_color, filter_linear_mipmap, repeat_enable;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	UV = UV * uv1_scale.xy + uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = round(UV*vec2(10.0*1.2,100.0*2.0))/100.0;
	vec2 base_uv2 = round(UV*vec2(10.0*1.2,100.0*2.0))/100.0;
	vec2 base_uv3 = round(UV*vec2(10.0*1.2,100.0*2.0))/100.0;
	base_uv.y += TIME/4.0;
	base_uv2.y -= TIME/6.0;
	base_uv3.y += TIME/1.0;
	base_uv2.x -= sin(TIME/3.0)/30.0;
	base_uv3.x -= sin(TIME/3.0)/16.0;
	base_uv.x -= sin(TIME/3.0)/40.0;
	vec4 albedo_tex = texture(texture_albedo, base_uv);
	vec4 albedo_tex2 = texture(texture_albedo2, base_uv2);
	vec4 albedo_tex3 = texture(texture_albedo2, base_uv3);
	ALBEDO = albedo.rgb * abs(1.173+cos(TIME/3.0)/100.0) * (albedo_tex2.rgb-albedo_tex3.g/2.0) / albedo_tex.rgb*albedo_tex3.rgb;

	float metallic_tex = dot(texture(texture_metallic, base_uv), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(texture(texture_roughness, base_uv), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
}
"
